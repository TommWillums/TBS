-------------------------------------------------------------------------------------
CLEAN ARCHITECTURE
-------------------------------------------------------------------------------------
|	  5		|		  4			|		  3			|		  2			|	  1		|
|			| Devices			| Controllers		|					|			|
|			| DB				| REST APIs			| Business Rules	|			|
| Config =>	| Web			 =>	| Gateways		 =>	| USE CASES		 =>	| ENTITIES	|
|			| UI				| Presenters		| Repository		|			|
|			| Ext Intf			| Jobs (Services?)	|					|			|
-------------------------------------------------------------------------------------

A layer can only call an equal or lower numbered layer. Otherwise we only call Interfaces.


ENTITIES (Layer 1)
Entities / Domain Objects (POCO++)

An entity can be an object with methods, or it can be a set of data structures and functions.

This inner core contains information about the business domain. The state of business objects is held here. 
The Entities layer is the heart of the model and should be well isolated from all other layers. 

Used by "Use Cases" layer

Persistence of the business objects is delegated to the Data layer.

----

USES CASES (Layer 2)
Use Cases - Application specific Business Rules
Flow of data to and from Entities.
Directs Entities to use enterprise-wide business rules to achieve the goals of the use case.
Should not be affected by changes to DB, UI or other common frameworks.

?? Used to aggregate the commands and queries in objects that are separated out through CQRS.

----

CONTROLLERS / REST APIs (Layer 3)
This layer coordinates the application activity. It doesn't contain any business logic. 

Can perform the basic (non-business related) validation on the user input data before transmitting it to the other (inner) layers of the application.
It does not hold the state of business objects, but it can hold the state of an application task's progress.
Doesn't contain any business or domain related logic or data access logic.
Doesn't have any state reflecting a business use case but it can manage the state of the user session or the progress of a task.

GATEWAYS, PRESENTERS, Interface Adapters
The software in this layer is a set of adapters that convert data from the format most convenient for the use cases and entities, 
to the format most convenient for some external agency such as the Database or the Web. 

The models are likely just data structures that are passed from the controllers to the use cases and back to the presenters and views.

Data is converted from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used (e.g, DB). 
No code inward of this circle should know anything at all about the database. If the database is a SQL database, then all the SQL should be restricted to this layer

Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.

----

DB / DATA (Layer 4)
Uses DapperContext and Dapper for ORM <-> SQL

Manages the state (session) of a business use case if the use case spans multiple user requests 
(e.g. loan registration process with multiple steps: enter loan details, system returning the products and rates based on the loan parameters, 
selecting a specific product/rate combination, and finally the system locking the loan for that rate).

Frameworks and Drivers.

The outermost layer is generally composed of frameworks and tools such as the Database, the Web Framework, etc. Generally you don’t write much code in this layer other than glue code that communicates to the next circle inwards.

This layer is where all the details go. The Web is a detail. The database is a detail. We keep these things on the outside where they can do little harm.

----

DATA CROSSING BOUNDARIES
Typically simple data structures. 
Basic structs, Data Transfer Objects or simply arguments in function calls. 
Possibly pack data into a hashmap, or construct it into an object. 
The important thing is that isolated, simple, data structures are passed across the boundaries. 

So when we pass data across a boundary, it is always in the form that is most convenient for the inner circle (lower layer).

----

Other stuff:

SERVICE OBJECTS
Service objects that only have a defined operational behavior which is not part of any domain object. 
Encapsulates behavior of the business domain that doesn't fit in the domain objects themselves.
Also, it should not be dependent on the application frameworks used in the other layers.

--
-- DI
-- Use Dependency Injection to inject objects like Repositories and Services into Domain objects
--
-- In the sample application, the service object (FundingServiceImpl) uses DI to inject the Entity objects (Loan, Borrower and FundingRequest). 
-- Also, Entities reference Repositories via DI. Similarly, other Java EE resources like DataSource, Hibernate Session Factory and Transaction Manager 
-- are injected into Service and Repository objects.
--

